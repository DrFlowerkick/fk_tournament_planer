# .github/workflows/_build_workspace.yml
name: build_workspace

on:
  # Reusable workflow: can be called from other workflows via "uses:"
  workflow_call:
    # inputs can be changed with the "with" statement in calling workflow
    inputs:
      rust_toolchain:
        description: "Rust toolchain channel (e.g., stable, beta, 1.80.0)"
        required: false
        type: string
        default: "stable"
      release_profile:
        description: "Build with --release for parity with test profile"
        required: false
        type: boolean
        default: true
      features:
        description: "Comma-separated Cargo features to enable (empty = default features)"
        required: false
        type: string
        default: ""
      node_version:
        description: "Node.js version (Playwright requirement if your project needs it)"
        required: false
        type: string
        default: "20.x"
      extra_args:
        description: "Extra arguments passed to cargo build (rarely needed)"
        required: false
        type: string
        default: ""

jobs:
  build:
    name: Build workspace
    runs-on: ubuntu-latest
    env:
      # Keep logs quieter in CI; adjust per repo preference
      RUST_LOG: warn
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ inputs.rust_toolchain }}
          profile: minimal
          override: true
      
      - uses: taiki-e/install-action@v2
        with:
          tool: cargo-leptos

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ inputs.node_version }}
          cache: "npm"
          cache-dependency-path: |
            package-lock.json
            end2end/package-lock.json

      - name: Install root-level npm dependencies (e.g. Tailwind, daisyui)
        run: npm ci
      
      - name: Print versions
        run: |
          rustc -Vv
          cargo -V

      - name: Cache Rust build
        # This speeds up subsequent jobs (tests/E2E) that use the same profile/features.
        uses: Swatinem/rust-cache@v2

      - name: Pre-fetch dependencies (optional but helps cold runs)
        run: cargo fetch

      - name: Build workspace (consistent with test profile/features)
        shell: bash
        run: |
          set -euo pipefail
          FLAGS=""
          if [ "${{ inputs.release_profile }}" = "true" ]; then
            FLAGS="$FLAGS --release"
          fi
          if [ -n "${{ inputs.features }}" ]; then
            FLAGS="$FLAGS --features \"${{ inputs.features }}\""
          fi
          if [ -n "${{ inputs.extra_args }}" ]; then
            FLAGS="$FLAGS ${{ inputs.extra_args }}"
          fi
          echo "Running: cargo leptos build $FLAGS"
          bash -c "cargo leptos build $FLAGS"
